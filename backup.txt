const express = require('express');
const app = express();
const cron = require('node-cron');
const { fork } = require('child_process');

const cors = require('cors');
const bodyParser = require('body-parser');
let Profiles;

const port = process.env.PORT || 3000;

/*****************************************Socket.io***************************************************/

const server = require('http').createServer(app);
const io = require('socket.io')(server, {
  cors: {
    origin: 'http://127.0.0.1:8080',
  },
});

io.on('connection', socket => {
  console.log('User connected:' + socket.id);
});

/*****************************************MongoDB***************************************************/
const { MongoClient, ObjectId } = require('mongodb');

const uri =
  'mongodb+srv://JakobFerguson:XbdHM2FJsjg4ajiO@trinitycapitaltesting.1yr5eaa.mongodb.net/?retryWrites=true&w=majority';

const client = new MongoClient(uri);

async function main(client) {
  try {
    await client.connect();
    console.log('Connected, 20');
  } catch (e) {
    console.error(e);
  }
}

main(client).catch(console.error);

/*****************************************Main Page***************************************************/

app.use(express.static('public'));
app.use(express.json());
app.use(
  cors({
    origin: ['http://localhost:3000', 'http://127.0.0.1:8080'],
    credentials: true,
  }),
);

app.post('/initialBalance', async (req, res) => {
  const { parcel } = req.body;

  const profile = parcel;

  const memberName = profile.memberName;

  let checkingTransAmounts = [];
  let savingsTransAmounts = [];

  let checkingBalance;

  profile.checkingAccount.transactions.forEach(transaction => {
    checkingTransAmounts.push(transaction.amount);
  });

  profile.savingsAccount.transactions.forEach(transaction => {
    savingsTransAmounts.push(transaction.amount);
  });

  checkingBalance = checkingTransAmounts.reduce((acc, mov) => acc + mov, 0);
  savingsBalance = savingsTransAmounts.reduce((acc, mov) => acc + mov, 0);

  await client
    .db('TrinityCapital')
    .collection('User Profiles')
    .updateOne(
      { 'checkingAccount.accountHolder': memberName },
      {
        $set: { 'checkingAccount.balanceTotal': checkingBalance },
      },
    );

  await client
    .db('TrinityCapital')
    .collection('User Profiles')
    .updateOne(
      { 'savingsAccount.accountHolder': memberName },
      {
        $set: { 'savingsAccount.balanceTotal': savingsBalance },
      },
    );

  const updatedUserProfile = await client
    .db('TrinityCapital')
    .collection('User Profiles')
    .findOne({ 'checkingAccount.accountHolder': memberName });

  const updatedChecking = updatedUserProfile.checkingAccount;

  io.emit('checkingAccountUpdate', updatedChecking);
});

app.get('/profiles', async (req, res) => {
  try {
    const profiles = await client
      .db('TrinityCapital')
      .collection('User Profiles')
      .find()
      .toArray();

    // Emit the profiles data to all connected clients

    const Profiles = await client
      .db('TrinityCapital')
      .collection('User Profiles')
      .find()
      .toArray();

    io.emit('profiles', Profiles);

    res.status(200).send(Profiles);
  } catch (error) {
    console.error('Error fetching profiles:', error);
    res.status(500).send('Internal Server Error');
  }
});

app.post('/loans', async (req, res) => {
  const { parcel } = req.body;
  const profile = parcel[0];
  const amount = parcel[1];
  let name = profile.checkingAccount.accountHolder;

  try {
    const UserProfile = await client
      .db('TrinityCapital')
      .collection('User Profiles')
      .findOne({ 'checkingAccount.accountHolder': name });

    // Update the transactions in the user profile
    const balance = UserProfile.checkingAccount.transactions.reduce(
      (acc, mov) => acc + mov,
      0,
    );
    await client
      .db('TrinityCapital')
      .collection('User Profiles')
      .updateOne(
        { 'checkingAccount.accountHolder': name },
        {
          $push: { 'checkingAccount.transactions': amount },
          $set: { 'checkingAccount.balanceTotal': balance },
        },
      );
    let newDate = new Date().toISOString();
    await client
      .db('TrinityCapital')
      .collection('User Profiles')
      .updateOne(
        { 'checkingAccount.accountHolder': name },
        { $push: { 'checkingAccount.movementsDates': newDate } },
      );
    const updatedUserProfile = await client
      .db('TrinityCapital')
      .collection('User Profiles')
      .findOne({ 'checkingAccount.accountHolder': name });

    const updatedChecking = updatedUserProfile.checkingAccount;

    io.emit('checkingAccountUpdate', updatedChecking);

    res.status(200).json({ message: 'Transaction successful' });
  } catch (error) {
    console.error(error);
    res.status(500).json({ error: 'Internal server error' });
  }
});

server.listen(port, () => {
  console.log(`Server running on port ${port}`);
});

/*****************************************Transfers***************************************************/

app.post('/transfer', async (req, res) => {
  const { parcel } = req.body;

  const currentProfile = parcel[0];
  const accountFromPg = parcel[1];
  const accountToPg = parcel[2];
  const amount = parcel[3];
  const memberNamePg = parcel[4];

  let fromBalanceField = [];
  let toBalanceField = [];

  let newDate = new Date().toISOString();

  if (
    accountFromPg.accountType === 'Checking' &&
    accountToPg.accountType === 'Savings'
  ) {
    await client
      .db('TrinityCapital')
      .collection('User Profiles')
      .updateOne(
        { 'checkingAccount.accountHolder': memberNamePg },
        {
          $push: {
            'checkingAccount.transactions': {
              amount: -amount,
              interval: 'once',
              Name: ` ${accountFromPg.accountType} ---> ${accountToPg.accountType}`,
              Category: 'Transfer',
            },
          },
        },
      );

    let newDate = new Date().toISOString();
    await client
      .db('TrinityCapital')
      .collection('User Profiles')
      .updateOne(
        { 'checkingAccount.accountHolder': memberNamePg },
        { $push: { 'checkingAccount.movementsDates': newDate } },
      );

    await client
      .db('TrinityCapital')
      .collection('User Profiles')
      .updateOne(
        { 'savingsAccount.accountHolder': memberNamePg },
        {
          $push: {
            'savingsAccount.transactions': {
              amount: amount,
              interval: 'once',
              Name: ` ${accountFromPg.accountType} ---> ${accountToPg.accountType}`,
              Category: 'Transfer',
            },
          },
        },
      );

    await client
      .db('TrinityCapital')
      .collection('User Profiles')
      .updateOne(
        { 'savingsAccount.accountHolder': memberNamePg },
        { $push: { 'savingsAccount.movementsDates': newDate } },
      );

    const updatedUserProfile = await client
      .db('TrinityCapital')
      .collection('User Profiles')
      .findOne({ 'checkingAccount.accountHolder': memberNamePg });

    const upCheck = updatedUserProfile.checkingAccount;
    const upSav = updatedUserProfile.savingsAccount;

    balanceCalc(memberNamePg, upCheck, upCheck.accountType);
    balanceCalc(memberNamePg, upSav, upSav.accountType);
  }

  if (
    accountFromPg.accountType === 'Savings' &&
    accountToPg.accountType === 'Checking'
  ) {
    await client
      .db('TrinityCapital')
      .collection('User Profiles')
      .updateOne(
        { 'savingsAccount.accountHolder': memberNamePg },
        {
          $push: {
            'savingsAccount.transactions': {
              amount: -amount,
              interval: 'once',
              Name: ` ${accountFromPg.accountType} ---> ${accountToPg.accountType}`,
              Category: 'Transfer',
            },
          },
        },
      );

    let newDate = new Date().toISOString();
    await client
      .db('TrinityCapital')
      .collection('User Profiles')
      .updateOne(
        { 'savingsAccount.accountHolder': memberNamePg },
        { $push: { 'savingsAccount.movementsDates': newDate } },
      );

    await client
      .db('TrinityCapital')
      .collection('User Profiles')
      .updateOne(
        { 'checkingAccount.accountHolder': memberNamePg },
        {
          $push: {
            'checkingAccount.transactions': {
              amount: amount,
              interval: 'once',
              Name: ` ${accountFromPg.accountType} ---> ${accountToPg.accountType}`,
              Category: 'Transfer',
            },
          },
        },
      );

    await client
      .db('TrinityCapital')
      .collection('User Profiles')
      .updateOne(
        { 'checkingAccount.accountHolder': memberNamePg },
        { $push: { 'checkingAccount.movementsDates': newDate } },
      );

    const updatedUserProfile = await client
      .db('TrinityCapital')
      .collection('User Profiles')
      .findOne({ 'checkingAccount.accountHolder': memberNamePg });

    const upCheck = updatedUserProfile.checkingAccount;
    const upSav = updatedUserProfile.savingsAccount;

    balanceCalc(memberNamePg, upCheck, upCheck.accountType);
    balanceCalc(memberNamePg, upSav, upSav.accountType);
  }
});

const balanceCalc = async function (memberName, acc, type) {
  let amounts = [];
  let balance;

  acc.transactions.forEach(transaction => {
    amounts.push(transaction.amount);
  });

  balance = amounts.reduce((acc, mov) => acc + mov, 0);

  if (type === 'Checking') {
    await client
      .db('TrinityCapital')
      .collection('User Profiles')
      .updateOne(
        { 'checkingAccount.accountHolder': memberName },
        { $set: { 'checkingAccount.balanceTotal': balance } },
      );
  } else if (type === 'Savings') {
    await client
      .db('TrinityCapital')
      .collection('User Profiles')
      .updateOne(
        { 'savingsAccount.accountHolder': memberName },
        { $set: { 'savingsAccount.balanceTotal': balance } },
      );
  }

  const updatedUserProfile = await client
    .db('TrinityCapital')
    .collection('User Profiles')
    .findOne({ 'checkingAccount.accountHolder': memberName });

  const updatedChecking = updatedUserProfile.checkingAccount;

  io.emit('checkingAccountUpdate', updatedChecking);
};

app.post('/bills', async (req, res) => {
  const { parcel } = req.body;

  const profile = parcel[0];
  const type = parcel[1];
  const amount = parcel[2];
  const interval = parcel[3];
  const billName = parcel[4];
  const cat = parcel[5];
  const date = parcel[6];

  console.log(date, 387);
  const prfName = profile.memberName;

  const newTrans = {
    amount: amount,
    interval: interval,
    Name: billName,
    Category: cat,
    Date: date,
  };

  const billSetter = async function (type, name, newTrans) {
    if (type === 'bill') {
      await client
        .db('TrinityCapital')
        .collection('User Profiles')
        .updateOne(
          { 'checkingAccount.accountHolder': name },
          { $push: { 'checkingAccount.bills': newTrans } },
        );
    } else if (type === 'payment') {
      await client
        .db('TrinityCapital')
        .collection('User Profiles')
        .updateOne(
          { 'checkingAccount.accountHolder': name },
          { $push: { 'checkingAccount.payments': newTrans } },
        );
    }

    billManager(name);
    paymentManager(name);
  };

  billSetter(type, prfName, newTrans);

  const billManager = async function (name) {
    let interval;
    const newProfile = await client
      .db('TrinityCapital')
      .collection('User Profiles')
      .findOne({ 'checkingAccount.accountHolder': name });

    let bills = newProfile.checkingAccount.bills;

    for (let i = 0; i < bills.length; i++) {
      let time = bills[i].interval;

      const now = new Date();
      const currentDay = now.getDate();
      let delay;

      if (time === 'weekly') {
        // Calculate the day of the week (0 = Sunday, 1 = Monday, ..., 6 = Saturday)
        const dayOfWeek = now.getDay();
        delay = `0 0 * * ${dayOfWeek}`;
      } else if (time === 'bi-weekly') {
        delay = `0 0 1,15 * *`;
      } else if (time === 'monthly') {
        delay = `0 0 ${currentDay} * *`;
      } else if (time === 'yearly') {
        delay = `0 0 1 1 *`;
      }

      //Displays the bills using the amount, every interval set above

      const billSet = async () => {
        let newDate = new Date().toISOString();
        await client
          .db('TrinityCapital')
          .collection('User Profiles')
          .updateOne(
            { 'checkingAccount.accountHolder': name },
            {
              $push: { 'checkingAccount.transactions': bills[i] },
            },
          );

        await client
          .db('TrinityCapital')
          .collection('User Profiles')
          .updateOne(
            { 'checkingAccount.accountHolder': name },
            {
              $push: { 'checkingAccount.movementsDates': newDate },
            },
          );

        balanceCalc(name);
        const updatedProfile = await client
          .db('TrinityCapital')
          .collection('User Profiles')
          .findOne({ 'checkingAccount.accountHolder': name });

        const updatedChecking = updatedProfile.checkingAccount;

        io.emit('checkingAccountUpdate', updatedChecking);
      };
      cron.schedule(delay, billSet);
    }
  };

  const paymentManager = async function (name) {
    let interval;
    const newProfile = await client
      .db('TrinityCapital')
      .collection('User Profiles')
      .findOne({ 'checkingAccount.accountHolder': name });

    let payments = newProfile.checkingAccount.payments;

    for (let i = 0; i < payments.length; i++) {
      let time = payments[i].interval;

      const now = new Date();
      const currentDay = now.getDate();
      let delay;

      if (time === 'weekly') {
        // Calculate the day of the week (0 = Sunday, 1 = Monday, ..., 6 = Saturday)
        const dayOfWeek = now.getDay();
        console.log(dayOfWeek, 509);
        delay = `0 0 * * ${dayOfWeek}`;
        // delay = `* * * * *`;
      } else if (time === 'bi-weekly') {
        delay = `0 0 1,15 * *`;
      } else if (time === 'monthly') {
        delay = `0 0 ${currentDay} * *`;
      } else if (time === 'yearly') {
        delay = `0 0 1 1 *`;
      }

      //Displays the bills using the amount, every interval set above

      const paymentSet = async () => {
        let newDate = new Date().toISOString();
        await client
          .db('TrinityCapital')
          .collection('User Profiles')
          .updateOne(
            { 'checkingAccount.accountHolder': name },
            {
              $push: { 'checkingAccount.transactions': payments[i] },
            },
          );

        await client
          .db('TrinityCapital')
          .collection('User Profiles')
          .updateOne(
            { 'checkingAccount.accountHolder': name },
            {
              $push: { 'checkingAccount.movementsDates': newDate },
            },
          );

        balanceCalc(name);

        const updatedProfile = await client
          .db('TrinityCapital')
          .collection('User Profiles')
          .findOne({ 'checkingAccount.accountHolder': name });

        const updatedChecking = updatedProfile.checkingAccount;

        io.emit('checkingAccountUpdate', updatedChecking);
      };
      cron.schedule(delay, paymentSet);
      console.log(delay, 339);
    }
  };

  const balanceCalc = async function (name) {
    let balanceArray = [];
    let balance;
    let profile = await client
      .db('TrinityCapital')
      .collection('User Profiles')
      .findOne({ 'checkingAccount.accountHolder': name });

    if (profile.checkingAccount.transactions.length <= 0) {
      balance = 0;
    } else if (profile.checkingAccount.transactions.length > 0) {
      for (let i = 0; i < profile.checkingAccount.transactions.length; i++) {
        let transAmounts = profile.checkingAccount.transactions[i].amount;

        balanceArray.push(transAmounts);
        balance = balanceArray.reduce((acc, mov) => acc + mov, 0);
      }
    }
    await client
      .db('TrinityCapital')
      .collection('User Profiles')
      .updateOne(
        { 'checkingAccount.accountHolder': name },
        {
          $set: { 'checkingAccount.balanceTotal': balance },
        },
      );
  };
  const updatedUserProfile = await client
    .db('TrinityCapital')
    .collection('User Profiles')
    .findOne({ 'checkingAccount.accountHolder': prfName });

  const updatedChecking = updatedUserProfile.checkingAccount;

  console.log(process.pid, 265);

  io.emit('checkingAccountUpdate', updatedChecking);
});

/********************************************************DEPOSISTS***********************************************/

app.post('/deposits', async (req, res) => {
  let newDate = new Date().toISOString();
  const { parcel } = req.body;

  const amount = parcel[0];
  const destination = parcel[1];
  const memberName = parcel[2];

  await client
    .db('TrinityCapital')
    .collection('User Profiles')
    .updateOne(
      { 'checkingAccount.accountHolder': memberName },
      {
        $push: {
          'checkingAccount.transactions': {
            amount: -amount,
            interval: 'once',
            Name: `${destination}`,
            Category: 'Check Deposit',
          },
        },
      },
    );

  await client
    .db('TrinityCapital')
    .collection('User Profiles')
    .updateOne(
      { 'checkingAccount.accountHolder': memberName },
      { $push: { 'checkingAccount.movementsDates': newDate } },
    );

  const updatedUserProfile = await client
    .db('TrinityCapital')
    .collection('User Profiles')
    .findOne({ 'checkingAccount.accountHolder': memberName });

  const updatedChecking = updatedUserProfile.checkingAccount;

  console.log(process.pid, 265);
  balanceCalc(memberName, updatedChecking, updatedChecking.accountType);
  io.emit('checkingAccountUpdate', updatedChecking);
});

app.post('/sendFunds', async (req, res) => {
  const { parcel } = req.body;

  const destinationProfile = parcel[0];
  const sender = parcel[1];
  const destinationAmount = parcel[2];

  console.log(destinationProfile, 470);

  let destinationDate = new Date();

  await client
    .db('TrinityCapital')
    .collection('User Profiles')
    .updateOne(
      { 'checkingAccount.accountHolder': destinationProfile },
      {
        $push: {
          'checkingAccount.transactions': {
            amount: destinationAmount,
            interval: 'once',
            Name: `Deposit from ${sender}`,
            Category: 'Money Deposit',
          },
        },
      },
    );

  await client
    .db('TrinityCapital')
    .collection('User Profiles')
    .updateOne(
      { 'checkingAccount.accountHolder': destinationProfile },
      { $push: { 'checkingAccount.movementsDates': destinationDate } },
    );

  //FOR SENDER
  await client
    .db('TrinityCapital')
    .collection('User Profiles')
    .updateOne(
      { 'checkingAccount.accountHolder': sender },
      {
        $push: {
          'checkingAccount.transactions': {
            amount: -destinationAmount,
            interval: 'once',
            Name: `Deposit to ${destinationProfile}`,
            Category: 'Money Deposit',
          },
        },
      },
    );

  await client
    .db('TrinityCapital')
    .collection('User Profiles')
    .updateOne(
      { 'checkingAccount.accountHolder': sender },
      { $push: { 'checkingAccount.movementsDates': destinationDate } },
    );

  const updatedUserProfile = await client
    .db('TrinityCapital')
    .collection('User Profiles')
    .findOne({ 'checkingAccount.accountHolder': sender });

  const updatedChecking = updatedUserProfile.checkingAccount;

  balanceCalc(sender, updatedChecking, updatedChecking.accountType);
  io.emit('checkingAccountUpdate', updatedChecking);
});

app.post('/createAccount', async (req, res) => {
  const db = client.db('TrinityCapital');
  const prfs = db.collection('User Profiles');
  const { parcel } = req.body;

  const firstName = parcel[0];
  const lastName = parcel[1];
  const schoolCode = parcel[2];
  const date = parcel[3];
  const userName = parcel[4];
  const PIN = parseInt(parcel[5]);

  let numMin = 1000000000000000;
  let numMax = 9999999999999999;

  let accountNumCheck =
    Math.floor(Math.random() * (numMax - numMin + 1)) + numMin;
  let accountNumSav =
    Math.floor(Math.random() * (numMax - numMin + 1)) + numMin;

  const memberName = `${firstName} ${lastName}`;

  let newAccount = {
    memberName: memberName,
    pin: PIN,
    numberOfAccounts: 2,
    checkingAccount: {
      routingNumber: 141257185,
      currency: 'USD',
      locale: 'en-US',
      created: `${date}`,
      accountHolder: memberName,

      balanceTotal: 0,
      bills: [],
      payments: [],
      accountType: 'Checking',
      accountNumber: accountNumCheck.toString(),
      movementsDates: [],
      transactions: [],
    },
    savingsAccount: {
      routingNumber: 141257185,
      currency: 'USD',
      locale: 'en-US',
      created: `${date}`,
      accountHolder: memberName,
      username: userName,
      balanceTotal: 0,
      bills: [],
      payments: [],
      accountType: 'Savings',
      accountNumber: accountNumSav.toString(),
      movementsDates: [],
      transactions: [],
    },
    userName: userName,
  };

  const pushAcc = await prfs.insertOne(newAccount);

  console.log(newAccount, 721);

  const modal = ` <dialog open class="baseModal">
<h1>No School Code Found</h1>
<h1>Please Try Again</h1>

<button><a href="#" class="buttonClass">Try Again</a></button>
</dialog>`;

  const userCode = parcel[2];
  console.log(userCode, 713);

  let codes = await client
    .db('TrinityCapital')
    .collection('School Codes')
    .findOne({ code: userCode });

  console.log(codes);

  if (codes === null) {
    io.emit('noSchoolCodeFound', modal);
  } else {
    console.log('Operation complete');
  }
});

/**************************************************LESSON SERVER FUNCTIONS*********************************************/

app.post('/lessonArrays', async (req, res) => {
  const { parcel } = req.body;

  const lessonNum = parcel[0];

  let lessonArray = await client
    .db('TrinityCapital')
    .collection('Lesson Arrays')
    .findOne({ lessonNumber: lessonNum });

  io.emit('lessonHtml', lessonArray.htmlCode);
});

app.post('/lessonModals', async (req, res) => {
  const { parcel } = req.body;

  const lessonName = parcel[0];

  let lessonModal = await client
    .db('TrinityCapital')
    .collection('LessonCarousels')
    .findOne({ LessonName: lessonName });

  console.log(lessonModal);

  io.emit('lessonModalHtml', [lessonModal.htmlCode, lessonName]);
});

app.post('/activityModals', async (req, res) => {
  const { parcel } = req.body;

  const activityName = parcel[0];

  console.log(activityName);

  let activityModal = await client
    .db('TrinityCapital')
    .collection('Activites')
    .findOne({ activity: activityName });

  let Q1 = await client
    .db('TrinityCapital')
    .collection('questionAnswerSets')
    .findOne({ setNum: 1 });

  console.log(Q1);

  io.emit('activityModalhtml', [activityModal.carouselHtml, Q1.htmlCode]);
});
// server.js (continued)

/****************************************TEACHER DASHBOARD********************************************/

app.post('/findTeacher', async (req, res) => {
  const { parcel } = req.body;

  const teachUser = parcel[0];
  const teachPin = parcel[1];

  let teacher = await client
    .db('TrinityCapital')
    .collection('Teachers')
    .findOne(({ Username: teachUser }, { PIN: teachPin }));

  if (teacher !== null) {
    io.emit('signOn', [true, teacher.TeacherName]);
  } else if (teacher === null) {
    io.emit('signOn', false);
  }
});

app.post('/retrieveStudents', async (req, res) => {
  const { parcel } = req.body;

  const periodNum = parcel[0];
  const teacherName = parcel[1];

  let students = await client
    .db('TrinityCapital')
    .collection('User Profiles')
    .find(({ Period: periodNum }, { Teacher: teacherName }))
    .toArray();

  io.emit('students', students);
});

app.post('/studentInfo', async (req, res) => {
  const { parcel } = req.body;
  const studentName = parcel[0];
  const teacherName = parcel[1];

  console.log(studentName, teacherName);

  try {
    let student = await client
      .db('TrinityCapital')
      .collection('User Profiles')
      .findOne({ memberName: studentName, Teacher: teacherName });

    if (student) {
      res.json(student);
    } else {
      res.status(404).send('Student not found');
    }

    console.log(student);
  } catch (error) {
    console.error('Error fetching student info:', error);
    res.status(500).send('Internal Server Error');
  }
});






?????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????








'use strict';

if (
  /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|OperaMini/i.test(
    navigator.userAgent,
  )
) {
  //window.location.replace('https://trinitycapitalmobile.netlify.app');
} else {
  console.log('Were on MOBILE!');
}

/********************************************Modal control*************************************/

//Modals
const mainApp = document.querySelector('.mainApp');
const loginBox = document.querySelector('.signOnBox');
const mobileLoginBox = document.querySelector('.mobileSignOnBox');
const billsModal = document.querySelector('.billsAndPaymentsModal');
const transferModal = document.querySelector('.transferModal');
const accountSwitchModal = document.querySelector('.accountSwitchModal');
const depositModal = document.querySelector('.depositModal');
const sendMoneyModal = document.querySelector('.sendMoneyModal');
const changeLanguageModal = document.querySelector('.changeLanguageModal');

//Modal Buttons
const accountSwitchBTN = document.querySelector('.accountSwitchBTN');
const transferModalBTN = document.querySelector('.transferBTN');
const billsModalBTN = document.querySelector('.billsModalBTN');
const depositModalBTN = document.querySelector('.depositsBTN');
const sendMoneyBTN = document.querySelector('.sendMoneyBTN');
const changeLanguageBTN = document.querySelector('.changeLanguageBTN');
const changeLangBTN = document.querySelector('.changeLangBtn');

//close Modals
const closeTransferModal = document.querySelector('.transferExitButton');
const closeBillModal = document.querySelector('.closeBills');
const closeAccountModal = document.querySelector('.closeAccounts');
const closeDepositModal = document.querySelector('.closeDeposits');
const closeSendMoneyModal = document.querySelector('.closeSendMoney');
const logOutBTN = document.querySelector('.logOutBTN');
const closeLanguageModal = document.querySelector('.closeLanguageModal');

logOutBTN.addEventListener('click', function () {
  location.reload();
});

changeLangBTN.addEventListener('click', function () {});

billsModalBTN.addEventListener('click', function () {
  billsModal.showModal();
});

closeBillModal.addEventListener('click', function () {
  billsModal.close();
});

transferModalBTN.addEventListener('click', function () {
  transferModal.showModal();
});

closeTransferModal.addEventListener('click', function () {
  transferModal.close();
});

accountSwitchBTN.addEventListener('click', function () {
  accountSwitchModal.showModal();
});

closeAccountModal.addEventListener('click', function () {
  accountSwitchModal.close();
});

depositModalBTN.addEventListener('click', function () {
  depositModal.showModal();
});

closeDepositModal.addEventListener('click', function () {
  depositModal.close();
});

sendMoneyBTN.addEventListener('click', function () {
  sendMoneyModal.showModal();
});

closeSendMoneyModal.addEventListener('click', function () {
  sendMoneyModal.close();
});

changeLanguageBTN.addEventListener('click', function () {
  changeLanguageModal.showModal();
});

closeLanguageModal.addEventListener('click', function () {
  changeLanguageModal.close();
});
window.screen.width <= 1300 ? mobileLoginBox.showModal() : loginBox.showModal();

if (mainApp) mainApp.style.display = 'none';

/***********************************************************Server Listeners**********************************************/

export const socket = io('http://localhost:3000');
export const socket2 = io('http://localhost:5040');

console.log('User connected:' + socket.id);
socket.on('checkingAccountUpdate', updatedChecking => {
  // Access the checkingAccount data from updatedUserProfile
  const checkingAccount = updatedChecking;
  console.log(checkingAccount, 'This is working');

  // Call your existing updateUI function with the updated checking account data
  displayBalance(checkingAccount);
  displayTransactions(checkingAccount);
});

const timerModal = document.querySelector('.timerModal');

timerModal.addEventListener('cancel', event => {
  event.preventDefault();
});

socket2.on('timer', active => {
  console.log(active);
  if (active) {
    timerModal.showModal();
  }

  if (!active) {
    timerModal.close();
  }
});

socket.on('donationChecking', updatedDonCheck => {
  const checkingAccount = updatedDonCheck;
  console.log(checkingAccount, 'This is working');

  // Call your existing updateUI function with the updated checking account data
  displayBalance(checkingAccount);
  displayTransactions(checkingAccount);
});

socket.on('donationSaving', updatedDonSav => {
  const savingsAccount = updatedDonSav;
  console.log(savingsAccount, 'This is working');

  // Call your existing updateUI function with the updated checking account data
  displayBalance(savingsAccount);
  displayTransactions(savingsAccount);
});

/***********************************************************Server Functions**********************************************/
const testServerProfiles = 'http://localhost:3000/profiles';

const loanURL = 'http://localhost:3000/loans';

const donationURL = 'http://localhost:3000/donations';

const donationSavingsURL = 'http://localhost:3000/donationsSavings';

const balanceURL = 'http://localhost:3000/initialBalance';

const productivityURL = 'http://localhost:5040/timers';

// Store the received profiles in a global variable or a state variable if you're using a front-end framework
let Profiles = [];

export async function startTimers() {
  const res = await fetch(productivityURL, {
    method: 'POST',
    headers: {
      'Content-Type': 'application/json',
    },
    body: JSON.stringify({
      parcel: currentProfile,
    }),
  });
}

export async function getInfoProfiles() {
  try {
    const res = await fetch(testServerProfiles, {
      method: 'GET',
    });

    if (res.ok) {
      Profiles = await res.json();

      // Log the initial profiles
      console.log(Profiles);

      // Now, listen for updates from the Socket.IO server
      socket.on('profiles', updatedProfiles => {
        // Update your UI with the updated profiles
        console.log('Received updated profiles:', updatedProfiles);

        // For example, you can update a list of profiles
        // Assuming you have a function to update the UI
      });
      return Profiles;
    } else {
      console.error('Failed to fetch profiles:', res.statusText);
    }
  } catch (error) {
    console.error(error.message);
  }
}

export async function initialBalance() {
  const res = await fetch(balanceURL, {
    method: 'POST',
    headers: {
      'Content-Type': 'application/json',
    },
    body: JSON.stringify({
      parcel: currentProfile,
    }),
  });
}

async function loanPush() {
  const res = await fetch(loanURL, {
    method: 'POST',
    headers: {
      'Content-Type': 'application/json',
    },
    body: JSON.stringify({
      parcel: [currentProfile, parseInt(loanAmount.value)],
    }),
  });
  console.log(currentProfile);
}

async function donationPush() {
  const res = await fetch(donationURL, {
    method: 'POST',
    headers: {
      'Content-Type': 'application/json',
    },
    body: JSON.stringify({
      parcel: [currentAccount, parseInt(donateAmount.value)],
    }),
  });
}

async function donationPushSavings() {
  const res = await fetch(donationSavingsURL, {
    method: 'POST',
    headers: {
      'Content-Type': 'application/json',
    },
    body: JSON.stringify({
      parcel: [currentAccount, parseInt(donateAmount.value)],
    }),
  });
}

export let profiles = await getInfoProfiles();

console.log(profiles);

/******************************************Variables ***************************************************/

export let currentAccount;
export let currentProfile;
let currentTime;
let accPIN;
let accUser;
//Currency codes for formatting
const currencyCodeMap = {
  840: 'USD',
  978: 'EUR',
  // add more currency codes here as needed
};

const closeT1 = document.querySelector('.closeBtn');
const signOnForm = document.querySelector('signOnForm');
const signOnText = document.querySelector('.signOntext');
const loginButton = document.querySelector('.login__btn');
const mobileLoginButton = document.querySelector('.mobileLoginBtn');

const formDiv = document.querySelector('.formDiv');
export let balance;

const lastUpdated = document.querySelector('.updateDate');
const transActionsDate = document.querySelector('.transactions__date');
const balanceValue = document.querySelector('.balance__value');
const balanceLabel = document.querySelector('.balance__label');
const accNumSwitch = document.querySelector('.form__input--user--switch');
const accPinSwitch = document.querySelector('.form__input--pin--switch');
const accBtnSwitch = document.querySelector('.form__btn--switch');
const btnClose = document.querySelector('.form__btn--close');
const userClose = document.querySelector('.form__input--user--close');
const userClosePin = document.querySelector('.form__input--pin--close');
const transactionContainer = document.querySelector('.transactions');
const requestLoanbtn = document.querySelector('.form__btn--loan');
const loanAmount = document.querySelector('.form__input--loan-amount');
const donateBtn = document.querySelector('.form__btn--donate');
const donateAmount = document.querySelector('.form__input--donate--amount');
const donatePin = document.querySelector('.form__input--pin--donate');
const accNumHTML = document.querySelector('.accountNumber');
const balanceDate = document.querySelector(`.dateText`);
const now = new Date();

//Used for formatting dates
const options = {
  hour: 'numeric',
  minute: 'numeric',
  day: 'numeric',
  month: 'numeric',
  year: 'numeric',
  // weekday: 'long',
};

/*****************************************Event Listeners ******************************************/

//login event listener (used to login to the app)
if (loginButton) {
  loginButton.addEventListener('click', function (event) {
    event.preventDefault();
    const loginPIN = document.querySelector('.login__input--pin');
    const loginText = document.querySelector('.login__input--user');
    loginFunc(loginPIN, loginText, loginBox);
    // Get the value of the input field
  });
}

if (mobileLoginButton) {
  mobileLoginButton.addEventListener('click', function (event) {
    event.preventDefault();
    const mobileLoginPIN = document.querySelector('.mobile_login__input--pin');
    const mobileLoginText = document.querySelector(
      '.mobile_login__input--user',
    );
    loginFunc(mobileLoginPIN, mobileLoginText, mobileLoginBox);
    console.log('running');
  });
}

const loginFunc = function (PIN, user, screen) {
  const pin = parseInt(PIN.value);

  for (let i = 0; i < profiles.length; i++) {
    if (user.value === profiles[i].userName && pin === profiles[i].pin) {
      currentProfile = profiles[i];
    } else if (user.value === profiles[i].userName && pin !== profiles[i].pin) {
      alert('incorrect PIN');
    } else if (user.value !== profiles[i].userName && pin === profiles[i].pin) {
      alert('incorrect Username');
    }
  }

  if (currentProfile) {
    initialBalance();

    // Retrieve saved transactions for current account

    screen.close();

    const signOnSection = document.querySelector('.signOnSection');

    signOnSection.style.display = 'none';

    // Display welcome message
    const signOnText = document.querySelector('.signOnText');
    signOnText.textContent = currentProfile.memberName.split(' ')[0];

    // Hide login form and display main app
    const formDiv = document.querySelector('.formDiv');
    const mainApp = document.querySelector('.mainApp');

    mainApp.style.display = 'flex';
    mainApp.style.opacity = 100;

    if (
      currentProfile.memberName === 'Darlene Jones' ||
      currentProfile.memberName === 'Jakob Ferguson'
    ) {
      startTimers();
    }

    const lessonName = document.querySelector('.lessonHeaderText');

    lessonName.textContent = currentProfile.currentLesson;

    currentAccount = currentProfile.checkingAccount;
    if (currentAccount) {
      console.log(currentAccount);
      //Add currentAccount here
      // Update the UI with the first account's information
      updateUI(currentAccount);
      //Starts loop function that displays the current Accounts bills

      //Displays the "Current Balanace for "x" string
      // balanceLabel.textContent = `Current balance for: #${currentAccount.accountNumber.slice(
      //   -4
      // )}`;

      //Displays the "As of" portion with the current date
      updateTime();
      balanceDate.textContent = `As of ${new Intl.DateTimeFormat(
        currentProfile.locale,
        options,
      ).format(currentTime)}`;
      //Display saved transactions for current account
      displayTransactions(currentAccount);
    } else {
      alert('No checking account found. Please contact customer service.');
    }
  }
};

//Switch accounts
if (accBtnSwitch) {
  accBtnSwitch.addEventListener('click', function (e) {
    e.preventDefault();
    console.log(currentAccount);
    //The value for the account you want to switch too
    let targetAccount = accNumSwitch.value;
    accPIN = parseInt(accPinSwitch.value);
    //Variable that matches the above with the matching account number
    let accountToSwitch;

    if (accPIN === currentProfile.pin) {
      if (
        targetAccount === currentProfile.checkingAccount.accountNumber.slice(-4)
      ) {
        currentAccount = currentProfile.checkingAccount;
        balanceLabel.textContent = `Current Balance for: #${currentAccount.accountNumber.slice(
          -4,
        )}`;
        updateUI(currentAccount);
      } else if (
        targetAccount === currentProfile.savingsAccount.accountNumber.slice(-4)
      ) {
        currentAccount = currentProfile.savingsAccount;
        balanceLabel.textContent = `Current Balance for: #${currentAccount.accountNumber.slice(
          -4,
        )}`;
        updateUI(currentAccount);
      }
    } else {
      alert('Incorrect PIN');
    }

    //Variable for the loan section
    const loanBox = document.querySelector('.operation--loan');
    //checks for savings accounr

    if (currentAccount.accountType === 'Savings') {
      loanBox.style.display = 'none';
    }
    //takes away loans if savings
    else if (currentAccount.accountType === 'Checking') {
      loanBox.style.display = 'inline';
    }

    accNumSwitch.value = '';
    accPinSwitch.value = '';
  });
}

//requesting loans

//checks if button exists
if (requestLoanbtn) {
  requestLoanbtn.addEventListener('click', function (e) {
    //prevents default action
    e.preventDefault();

    loanPush();

    loanAmount.value = '';

    //Declares the amount as the user entered amount.
  });
}

//Donating money
if (donateBtn) {
  donateBtn.addEventListener('click', function (e) {
    e.preventDefault();
    //How much a user donates

    if (currentAccount.accountType === 'Checking') {
      donationPush();
    } else if (currentAccount.accountType === 'Savings') {
      donationPushSavings();
    }

    donatePin.value = '';
    donateAmount.value = '';
  });
}

/********************************************Functions *********************************************/
if (mainApp) {
  mainApp.style.opacity = 0;
}

//createUsername(profiles);
//updates current time
const updateTime = function () {
  currentTime = new Date();
};

//This function updates local storage with any new data (Mainly transactions)

//Displays Currently Logged in profile's accounts sorted in order of checking first, then in order of most recently created.
const displayAccounts = function (currentAccount) {
  const accountContainer = document.querySelector('.accountContainer');
  accountContainer.innerHTML = '';

  //Shows no accounts if there are no accounts int the current profile

  //Sort the accounts by type (checking first) and creation date

  let balance = formatCur(
    currentProfile.locale,

    currentProfile.currency,
  );

  let lastTransactionDate = new Date(
    currentProfile.checkingAccount.movementsDates[
      currentProfile.checkingAccount.movementsDates.length - 1
    ],
  ).toLocaleDateString(currentProfile.locale);

  let lastTransactionDateSavings = new Date(
    currentProfile.savingsAccount.movementsDates[
      currentProfile.savingsAccount.movementsDates.length - 1
    ],
  ).toLocaleDateString(currentProfile.locale);

  const html = [
    `
        <div class="row accountsRow">
          <div class="col accountType">${
            currentProfile.checkingAccount.accountType
          }</div>
          <div class="col accountNumber">${currentProfile.checkingAccount.accountNumber.slice(
            -4,
          )}</div>
          <div class="col updateDate">${lastTransactionDate}</div>
        </div>
      
      <div class="row accountsRow">
        <div class="col accountType">${
          currentProfile.savingsAccount.accountType
        }</div>
        <div class="col accountNumber">${currentProfile.savingsAccount.accountNumber.slice(
          -4,
        )}</div>
        <div class="col updateDate">${lastTransactionDateSavings}</div>
      </div>
      `,
  ];

  accountContainer.insertAdjacentHTML('beforeEnd', html);
};

//Display Transactions
export const displayTransactions = function (currentAccount) {
  let movs;

  //selects the transactions HTML element
  const transactionContainer = document.querySelector('.transactionsColumn');
  transactionContainer.innerHTML = '';

  //Variable set for the transactions themselves

  movs = currentAccount.transactions;

  //A loop that runs through each transaction in the current account object
  movs.forEach(function (mov, i) {
    //ternerary to determine whether a transaction is a deposit or withdrawal

    let date;

    //Sets the date for each transaction according to the date set in the current Account object

    //Sets up the date variable for the transactions
    date = new Date(currentAccount.movementsDates[i]);

    //displays date next to transactions
    const displayDate = formatMovementDate(date, currentAccount.locale);
    //Formats transactions for user locale
    const formattedMov = formatCur(
      mov.amount,
      currentAccount.locale,
      currentAccount.currency,
    );
    let transType;
    let transName = mov.Name;

    let movIcon;

    if (mov.Category === 'Money Deposit') {
      movIcon = `<i class="fa-solid fa-dollar-sign transImg sndMon"></i>`;
    }
    if (mov.Category === 'Transfer') {
      movIcon = `<i class="fa-solid fa-money-bill-transfer transImg"></i>`;
    }

    if (mov.Category === 'car-note') {
      movIcon = `<i class="fa-solid fa-car transImg"></i>`;
    }
    if (mov.Category === 'rent') {
      movIcon = `<i class="fa-solid fa-house transImg"></i>`;
    }
    if (mov.Category === 'car-insurance') {
      movIcon = `<i class="fa-solid fa-car-burst transImg"></i>`;
    }
    if (mov.Category === 'home-insurance') {
      movIcon = `<i class="fa-solid fa-house-crack transImg"></i>`;
    }
    if (mov.Category === 'food') {
      movIcon = `<i class="fa-solid fa-utensils transImg"></i>`;
    }
    if (mov.Category === 'electric') {
      movIcon = `<i class="fa-solid fa-bolt transImg"></i>`;
    }

    if (mov.Category === 'gas') {
      movIcon = `<i class="fa-solid fa-fire-flame-simple transImg"></i>`;
    }

    if (mov.Category === 'water') {
      movIcon = `<i class="fa-solid fa-droplet transImg"></i>`;
    }

    if (mov.Category === 'trash-collection') {
      movIcon = `<i class="fa-solid fa-dumpster transImg"></i>`;
    }

    if (mov.Category === 'phone-bill') {
      movIcon = `<i class="fa-solid fa-phone transImg"></i>`;
    }

    if (mov.Category === 'internet') {
      movIcon = `<i class="fa-solid fa-wifi transImg"></i>`;
    }

    if (mov.Category === 'custom-expense') {
      movIcon = `<i class="fa-solid fa-screwdriver-wrench transImg"></i>`;
    }

    if (mov.Category === 'paycheck') {
      movIcon = `<i class="fa-solid fa-dollar-sign transImg dollarSignImg"></i>`;
    }
    if (mov.Category === 'Check Deposit') {
      movIcon = `<i class="fa-solid fa-money-check transImg"></i>`;
    }
    //HTML for transactions
    if (mov.amount < 0) {
      transType = 'negTrans';
    } else if (mov.amount > 0) {
      transType = 'posTrans';
    }
    const html = `<div class="transaction row">
                    <div class="transIcon col-4">
                      ${movIcon}
                    </div>
                    <div class="transNameAndDate col">
                      <p class="transName">${transName} (${mov.Category})</p>
                      <p class="transDate">${displayDate}</p>
                    </div>
                    <div class="transAmount col">
                      <p class="transAmountText ${transType}">${formattedMov}</p>
                    </div>
                  </div>`;
    //Inserts HTML with required data
    transactionContainer.insertAdjacentHTML('afterbegin', html);
    displayBillList(currentAccount);
  });
};

export const displayBillList = function (currentAccount) {
  let bills;

  //selects the transactions HTML element
  const billListContainer = document.querySelector('.bills');
  billListContainer.innerHTML = '';

  //Variable set for the transactions themselves

  bills = currentAccount.bills;

  //Sets the date for each transaction according to the date set in the current Account object

  //Sets up the date variable for the transactions

  //A loop that runs through each transaction in the current account object
  if (currentAccount.accountType != 'Savings') {
    bills.forEach(function (bill, i) {
      //ternerary to determine whether a transaction is a deposit or withdrawal

      let currentDate;
      let advancedDate;

      //Sets the date for each transaction according to the date set in the current Account object

      //Sets up the date variable for the transactions
      currentDate = new Date(bill.Date);

      //currentDate = new Date();

      if (bill.interval === 'weekly') {
        advancedDate = currentDate.setUTCDate(currentDate.getUTCDate() + 7);
      }

      if (bill.interval === 'bi-weekly') {
        advancedDate = currentDate.setUTCDate(currentDate.getUTCDate() + 14);
      }

      if (bill.interval === 'monthly') {
        advancedDate = currentDate.setUTCDate(currentDate.getUTCDate() + 30);
      }

      if (bill.interval === 'yearly') {
        advancedDate = currentDate.setUTCDate(currentDate.getUTCDate() + 365);
      }

      //displays date next to transactions
      const displayDate = formatMovementDate(
        advancedDate,
        currentAccount.locale,
      );

      //Formats transactions for user locale
      const formattedMov = formatCur(
        bill.amount,
        currentAccount.locale,
        currentAccount.currency,
      );
      let transType;
      let transName = bill.Name;

      let billIcon;

      if (bill.Category === 'car-note') {
        billIcon = `<i class="fa-solid fa-car "></i>`;
      }
      if (bill.Category === 'rent') {
        billIcon = `<i class="fa-solid fa-house rentIcon"></i>`;
      }
      if (bill.Category === 'car-insurance') {
        billIcon = `<i class="fa-solid fa-car-burst "></i>`;
      }
      if (bill.Category === 'home-insurance') {
        billIcon = `<i class="fa-solid fa-house-crack "></i>`;
      }
      if (bill.Category === 'food') {
        billIcon = `<i class="fa-solid fa-utensils "></i>`;
      }
      if (bill.Category === 'electric') {
        billIcon = `<i class="fa-solid fa-bolt "></i>`;
      }

      if (bill.Category === 'gas') {
        billIcon = `<i class="fa-solid fa-fire-flame-simple "></i>`;
      }

      if (bill.Category === 'water') {
        billIcon = `<i class="fa-solid fa-droplet "></i>`;
      }

      if (bill.Category === 'trash-collection') {
        billIcon = `<i class="fa-solid fa-dumpster "></i>`;
      }

      if (bill.Category === 'phone-bill') {
        billIcon = `<i class="fa-solid fa-phone "></i>`;
      }

      if (bill.Category === 'internet') {
        billIcon = `<i class="fa-solid fa-wifi wifiIcon "></i>`;
      }

      if (bill.Category === 'custom-expense') {
        billIcon = `<i class="fa-solid fa-screwdriver-wrench billListCustom "></i>`;
      }

      if (bill.Category === 'paycheck') {
        billIcon = `<i class="fa-solid fa-dollar-sign  "></i>`;
      }
      //HTML for transactions

      const html = `<div class="billsRow row">
      <div class="icon col-4">
        ${billIcon}
      </div>
      <div class="billName col">
        <p class="billText">${bill.Name}($${bill.amount})</p>
      </div>
      <div class="col billDate">
        <p>Reoccurs: ${displayDate}</p>
      </div>
    </div>`;
      //Inserts HTML with required data
      billListContainer.insertAdjacentHTML('afterbegin', html);
    });
  }
};

//formats the transactions dates to the users locale
export const formatMovementDate = function (date, locale) {
  //international time format based on the date given in this fuction
  return new Intl.DateTimeFormat(locale).format(date);
};
//formats currency based on user locale
function formatCur(value, currency, locale) {
  //Sets currency based on locale currency code. (Defaults to USD if no locale can be found)
  const currencyCode = currencyCodeMap[currency] || 'USD';
  //Sets style and code, and formats the transaction
  return new Intl.NumberFormat(locale, {
    style: 'currency',
    currency: currencyCode,
  }).format(value);
}

//Displays the current balance based on the transactions array
export const displayBalance = function (acc) {
  //calculates the balance based on the transaction array

  //displays balance
  balanceValue.textContent = formatCur(
    acc.balanceTotal,
    acc.locale,
    acc.currency,
  );
};

//Updates the webpage UI with all of the needed data
export const updateUI = function (acc) {
  //Displays the Transactions data
  displayTransactions(acc);
  //Displays the balance with correct data
  displayBalance(acc);
  //Displays the users bill list
  displayBillList(acc);
};
